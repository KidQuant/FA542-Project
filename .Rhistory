lm.model_2 <- lm(V1~XLF+XLE, data=etf_train)
library(tidyverse)
library(skimr)
library(jsonlite)
library(scales)
library(tidymodels)
library(lubridate)
library(Hmisc)
library(MASS)
library(StepReg)
library(mgcv)
library(VGAM)
dow_30_train <- read.csv("Dow_30_components_training_return.csv")
dow_index_train <- read.csv("Dow_30_index_training_return.csv")
dow_train <- cbind(dow_30_train, dow_index_train$V1)
names(dow_train)[names(dow_train) == "dow_index_train$V1"] <- "V1"
dow_train$X <- NULL
train_model <- lm(V1 ~ ., data=dow_train)
formula <- V1 ~ .
res <- stepwise(formula = formula,
data = dow_train,
type = "linear",
strategy = "forward",
metric = c("AIC"))
res$overview
etf_train <- read.csv("ETFs_training_return.csv")
etf_train <- cbind(etf_train, dow_index_train$V1)
names(etf_train)[names(etf_train) == "dow_index_train$V1"] <- "V1"
etf_train$X <- NULL
etf.reg <- lm(V1~XLE+XLB, data=etf_train)
dow_30_test <- read.csv("Dow_30_components_testing_return.csv")
dow_30_test <- dow_30_test[, c("JPM", "MMM", "V", "BA", "XOM", "HD", "IBM", "UNH", "MCD", "GS")]
dow_index_test <- read.csv("Dow_30_index_testing_return.csv")
etf_test <- read.csv("ETFs_testing_return.csv")
etf_test <- etf_test[, c("XLE", "XLB")]
lm.model_1 <- lm(V1 ~ JPM+MMM+V+BA+XOM+HD+IBM+UNH+MCD+GS, data=dow_train)
lm.model_2 <- lm(V1~XLF+XLE, data=etf_train)
prediction1 <- predict(lm.model_1, dow_30_test)
prediction2 <- predict(lm.model_2, etf_test)
lm.model_1 <- lm(V1 ~ JPM+MMM+V+BA+XOM+HD+IBM+UNH+MCD+GS, data=dow_train)
lm.model_2 <- lm(V1~XLB+XLE, data=etf_train)
prediction1 <- predict(lm.model_1, dow_30_test)
prediction2 <- predict(lm.model_2, etf_test)
predictions_df <- data.frame(
Model1 = prediction1,
Model2 = prediction2,
Actual = dow_index_test$V1
)
# Perform pairwise t-tests
pairwise_tests <- pairwise.t.test(
c(predictions_df$Model1, predictions_df$Model2, predictions_df$Actual),
rep(c("Model1", "Model2", "Actual"), c(length(prediction1), length(prediction2), length(dow_index_test$V1))),
paired = TRUE
)
# Print results
print(pairwise_tests)
pairwise_tests$p.value
library(tidyverse)
library(skimr)
library(jsonlite)
library(scales)
library(tidymodels)
library(lubridate)
library(Hmisc)
library(MASS)
library(StepReg)
library(mgcv)
library(VGAM)
library(caret)
library(glmnet)
model_data <- read.csv('data/model_data.csv')
lm.model <- lm(log_price ~ room_type + accommodates + bathrooms + bedrooms + minimum_nights + availability_365 + number_of_reviews + review_scores_rating + review_scores_accuracy + review_scores_location + wifi + parking + dryer + washer + kitchen + room_type + property_agg + superhost_t + room_type:property_agg, data = model_data)
summary(lm.model)
backward_model <- step(lm.model, direction="backward")
backward_model <- lm(log_price ~ parking + review_scores_value + review_scores_rating + number_of_reviews + dryer + availability_365 + bedrooms:property_agg + kitchen + washer + minimum_nights + accommodates + room_type, data=model_data)
summary(backward_model)
backward_model <- lm(log_price ~ parking + review_scores_value + review_scores_rating + number_of_reviews + dryer + availability_365 + room_type:property_agg + kitchen + washer + minimum_nights + accommodates + room_type, data=model_data)
summary(backward_model)
backward_model <- lm(log_price ~ parking + review_scores_value + review_scores_rating + property_agg + number_of_reviews + dryer + availability_365 + room_type:property_agg + kitchen + washer + minimum_nights + accommodates + room_type, data=model_data)
summary(backward_model)
# Plot the ridge regression model
plot(cv_ridge)
var_imp <- varImp(backward_model, scale=FALSE)
write.csv(var_imp, file = 'data/var_imp.csv', row.names = FALSE)
x <- model.matrix(log_price ~ room_type + accommodates + bathrooms + bedrooms + minimum_nights + availability_365 + number_of_reviews + review_scores_rating + review_scores_accuracy + review_scores_value + wifi + parking + dryer + washer + kitchen + room_type + property_agg + superhost_t + bedrooms:property_agg, data = model_data)[, -1]
y <- model_data$log_price
ridge_model <- glmnet(x, y, alpha = 0)
# Perform cross-validation to find the best lambda
cv_ridge <- cv.glmnet(x, y, alpha = 0)
best_lambda <- cv_ridge$lambda.min
# Fit the ridge regression model with the best lambda
ridge_model_best <- glmnet(x, y, alpha = 0, lambda = best_lambda)
# Predict the values using the ridge regression model
predictions <- predict(ridge_model_best, s = best_lambda, newx = x)
# Calculate the R-squared value
sst <- sum((y - mean(y))^2)
sse <- sum((predictions - y)^2)
r_squared <- 1 - sse/sst
print(paste("R-squared for the ridge regression model:", r_squared))
# Print the coefficients for the ridge regression model
ridge_coefficients <- coef(ridge_model_best)
print(ridge_coefficients)
# Plot the ridge regression model
plot(cv_ridge)
title("Ridge Regression Model Cross-Validation Plot")
# Plot the coefficients of the ridge regression model
plot(ridge_model_best, xvar = "lambda", label = TRUE)
title("Ridge Regression Coefficients Plot")
# Create a lasso regression model using the same data
lasso_model <- glmnet(x, y, alpha = 1)
# Perform cross-validation to find the best lambda
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda_lasso <- cv_lasso$lambda.min
# Fit the lasso regression model with the best lambda
lasso_model_best <- glmnet(x, y, alpha = 1, lambda = best_lambda_lasso)
# Predict the values using the lasso regression model
lasso_predictions <- predict(lasso_model_best, s = best_lambda_lasso, newx = x)
# Calculate the R-squared value
sst_lasso <- sum((y - mean(y))^2)
sse_lasso <- sum((lasso_predictions - y)^2)
r_squared_lasso <- 1 - sse_lasso/sst_lasso
print(paste("R-squared for the lasso regression model:", r_squared_lasso))
# Print the coefficients for the lasso regression model
lasso_coefficients <- coef(lasso_model_best)
print(lasso_coefficients)
# Plot the lasso regression model
plot(cv_lasso, main="")
title("Lasso Regression Model Cross-Validation Plot")
# Plot the ridge regression model
plot(cv_ridge, title="")
title("Ridge Regression Model Cross-Validation Plot")
# Plot the coefficients of the ridge regression model
plot(ridge_model_best, xvar = "lambda", label = TRUE)
title("Ridge Regression Coefficients Plot")
# Create a lasso regression model using the same data
lasso_model <- glmnet(x, y, alpha = 1)
# Perform cross-validation to find the best lambda
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda_lasso <- cv_lasso$lambda.min
# Fit the lasso regression model with the best lambda
lasso_model_best <- glmnet(x, y, alpha = 1, lambda = best_lambda_lasso)
# Predict the values using the lasso regression model
lasso_predictions <- predict(lasso_model_best, s = best_lambda_lasso, newx = x)
# Calculate the R-squared value
sst_lasso <- sum((y - mean(y))^2)
sse_lasso <- sum((lasso_predictions - y)^2)
r_squared_lasso <- 1 - sse_lasso/sst_lasso
print(paste("R-squared for the lasso regression model:", r_squared_lasso))
# Print the coefficients for the lasso regression model
lasso_coefficients <- coef(lasso_model_best)
print(lasso_coefficients)
# Plot the lasso regression model
plot(cv_lasso, main="")
title("Lasso Regression Model Cross-Validation Plot")
best_lambda
best_lambda
best_lambda_lasso
# Plot the ridge regression model
plot(cv_ridge, title="")
title("Ridge Regression Model Cross-Validation Plot")
# Plot the coefficients of the ridge regression model
plot(ridge_model_best, xvar = "lambda", label = TRUE)
title("Ridge Regression Coefficients Plot")
# Create a lasso regression model using the same data
lasso_model <- glmnet(x, y, alpha = 1)
# Perform cross-validation to find the best lambda
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda_lasso <- cv_lasso$lambda.min
# Fit the lasso regression model with the best lambda
lasso_model_best <- glmnet(x, y, alpha = 1, lambda = best_lambda_lasso)
# Predict the values using the lasso regression model
lasso_predictions <- predict(lasso_model_best, s = best_lambda_lasso, newx = x)
# Calculate the R-squared value
sst_lasso <- sum((y - mean(y))^2)
sse_lasso <- sum((lasso_predictions - y)^2)
r_squared_lasso <- 1 - sse_lasso/sst_lasso
print(paste("R-squared for the lasso regression model:", r_squared_lasso))
# Print the coefficients for the lasso regression model
lasso_coefficients <- coef(lasso_model_best)
print(lasso_coefficients)
# Plot the lasso regression model
plot(cv_lasso, main="")
title("Lasso Regression Model Cross-Validation Plot")
lasso_coefficients
library("quantmod")
library("fBasics")
symbols <- c("ADBE", "AMD", "MSFT", "QCOM" )
getSymbols(symbols)
msft_returns <- dailyReturn(MSFT$MSFT.Close)
log_msft_returns <- log(msft_returns + 1)
basicStats(log_msft_returns)
amd_returns <- dailyReturn(AMD$AMD.Close)
log_amd_returns <- log(amd_returns + 1)
adbe_returns <- dailyReturn(ADBE$ADBE.Close)
log_adbe_returns <- log(adbe_returns + 1)
qcom_returns <- dailyReturn(QCOM$QCOM.Close)
log_qcom_returns <- log(qcom_returns + 1)
par(mfrow=c(1,4))  # Set up the plotting area to have 2 rows and 2 columns
acf(log_msft_returns, main="ACF of MSFT Log Returns", lag.max=20)
acf(log_amd_returns, main="ACF of AMD Log Returns", lag.max=20)
acf(log_adbe_returns, main="ACF of ADBE Log Returns", lag.max=20)
acf(log_qcom_returns, main="ACF of QCOM Log Returns", lag.max=20)
par(mfrow=c(2,2))  # Set up the plotting area to have 2 rows and 2 columns
acf(log_msft_returns, main="ACF of MSFT Log Returns", lag.max=20)
acf(log_amd_returns, main="ACF of AMD Log Returns", lag.max=20)
acf(log_adbe_returns, main="ACF of ADBE Log Returns", lag.max=20)
acf(log_qcom_returns, main="ACF of QCOM Log Returns", lag.max=20)
par(mfrow=c(2,2))  # Set up the plotting area to have 2 rows and 2 columns
acf(log_msft_returns, main="MSFT", lag.max=20)
acf(log_amd_returns, main="AMD", lag.max=20)
acf(log_adbe_returns, main="ADBE", lag.max=20)
acf(log_qcom_returns, main="QCOM", lag.max=20)
library("quantmod")
library("fBasics")
symbols <- c("ADBE", "AMD", "MSFT", "QCOM" )
getSymbols(symbols)
msft_returns <- monthlyReturn(MSFT$MSFT.Close)
log_msft_returns <- log(msft_returns + 1)
amd_returns <- monthlyReturn(AMD$AMD.Close)
log_amd_returns <- log(amd_returns + 1)
adbe_returns <- monthlyReturn(ADBE$ADBE.Close)
log_adbe_returns <- log(adbe_returns + 1)
qcom_returns <- monthlyReturn(QCOM$QCOM.Close)
log_qcom_returns <- log(qcom_returns + 1)
par(mfrow=c(1,4))  # Set up the plotting area to have 2 rows and 2 columns
acf(log_msft_returns, main="ACF of MSFT Log Returns", lag.max=20)
acf(log_amd_returns, main="ACF of AMD Log Returns", lag.max=20)
acf(log_adbe_returns, main="ACF of ADBE Log Returns", lag.max=20)
acf(log_qcom_returns, main="ACF of QCOM Log Returns", lag.max=20)
par(mfrow=c(2,2))  # Set up the plotting area to have 2 rows and 2 columns
acf(log_msft_returns, main="ACF of MSFT Log Returns", lag.max=20)
acf(log_amd_returns, main="ACF of AMD Log Returns", lag.max=20)
acf(log_adbe_returns, main="ACF of ADBE Log Returns", lag.max=20)
acf(log_qcom_returns, main="ACF of QCOM Log Returns", lag.max=20)
library("quantmod")
library("fBasics")
symbols <- c("ADBE", "AMD", "MSFT", "QCOM" )
getSymbols(symbols)
msft_returns_daily <- dailyReturn(MSFT$MSFT.Close)
msft_returns_monthly <- monthlyReturn(MSFT$MSFT.Close)
log_msft_returns_daily <- log(msft_returns_daily + 1)
log_msft_returns_monthly <- log(msft_returns_monthly + 1)
basicStats(log_msft_returns_daily)
# Cisco (CSCO)
csco_returns <- dailyReturn(CSCO$CSCO.Close) * 100
library("quantmod")
library("fBasics")
symbols <- c("ADBE", "AMD", "MSFT", "QCOM", "EBAY", "ORCL", "CSCO", "INTU")
getSymbols(symbols)
# Cisco (CSCO)
csco_returns <- dailyReturn(CSCO$CSCO.Close) * 100
basicStats(csco_returns)
# Intuit (INTU)
intu_returns <- dailyReturn(INTU$INTU.Close) * 100
basicStats(intu_returns)
# Cisco (CSCO)
csco_returns <- dailyReturn(CSCO$CSCO.Close) * 100
basicStats(csco_returns)
# Intuit (INTU)
intu_returns <- dailyReturn(INTU$INTU.Close) * 100
basicStats(intu_returns)
normalTest(log_csco_returns, method = "jb")
# Cisco (CSCO)
csco_returns <- dailyReturn(CSCO$CSCO.Close) * 100
basicStats(csco_returns)
normalTest(log_csco_returns, method = "jb")
log_csco_returns <- log(csco_returns + 1) * 100
basicStats(log_csco_returns)
log_intu_returns <- log(intu_returns + 1) * 100
basicStats(log_intu_returns)
normalTest(log_csco_returns, method = "jb")
normalTest(log_csco_returns, method = "jb")
normalTest(log_intu_returns, method = "jb")
normalTest(log_adbe_returns, method = "jb")
normalTest(log_qcom_returns, method = "jb")
normalTest(log_csco_returns, method = "jb")
# Cisco (CSCO)
csco_returns <- dailyReturn(CSCO$CSCO.Close) * 100
log_csco_returns
normalTest(log_intu_returns, method = "jb")
# Normality Tests (Jarque-Bera Test)
normalTest(log_msft_returns, method = "jb")
normalTest(log_amd_returns, method = "jb")
normalTest(log_adbe_returns, method = "jb")
normalTest(log_qcom_returns, method = "jb")
normalTest(log_csco_returns, method = "jb")
log_csco_returns
normalTest(log_csco_returns, method = "jb")
library("quantmod")
library("fBasics")
symbols <- c("ADBE", "AMD", "MSFT", "QCOM", "EBAY", "ORCL", "CSCO", "INTU")
getSymbols(symbols)
# Intuit (INTU)
intu_returns <- dailyReturn(INTU$INTU.Close) * 100
basicStats(intu_returns)
log_intu_returns <- log(intu_returns + 1) * 100
basicStats(log_intu_returns)
normalTest(log_csco_returns, method = "jb")
normalTest(log_qcom_returns, method = "jb")
log_intu_returns <- log(intu_returns + 1) * 100
normalTest(log_csco_returns, method = "jb")
log_csco_returns <- log(csco_returns + 1) * 100
# Cisco (CSCO)
csco_returns <- dailyReturn(CSCO$CSCO.Close) * 100
log_csco_returns <- log(csco_returns + 1) * 100
basicStats(log_csco_returns)
normalTest(log_csco_returns, method = "jb")
log_amd_returns <- log(amd_returns + 1) * 100
# AMD
amd_returns <- dailyReturn(AMD$AMD.Close) * 100
log_amd_returns <- log(amd_returns + 1) * 100
normalTest(log_amd_returns, method = "jb")
symbols <- c("ADBE", "AMD", "MSFT", "QCOM" "CSCO")
library("quantmod")
library("fBasics")
symbols <- c("ADBE", "AMD", "MSFT", "QCOM" "CSCO")
getSymbols(symbols)
csco_returns <- dailyReturn(CSCO$CSCO.Close)
log_csco_returns <- log(csco_returns + 1)
normalTest(log_csco_returns,method="jb")
basicStats(log_csco_returns)
basicStats(csco_returns)
csco_returns <- dailyReturn(CSCO$CSCO.Close) * 100
log_csco_returns <- log(csco_returns + 1) * 100
basicStats(csco_returns)
normalTest(log_csco_returns,method="jb")
csco_returns <- csco_returns * 100
normalTest(log_csco_returns,method="jb")
csco_returns <- dailyReturn(CSCO$CSCO.Close)
csco_returns <- csco_returns * 100
normalTest(log_csco_returns,method="jb")
csco_returns <- dailyReturn(CSCO$CSCO.Close)
normalTest(log_csco_returns,method="jb")
symbols <- c("ADBE", "AMD", "MSFT", "QCOM" "CSCO")
symbols <- c("ADBE", "AMD", "MSFT", "QCOM", "CSCO")
getSymbols(symbols)
csco_returns <- dailyReturn(CSCO$CSCO.Close)
normalTest(log_csco_returns,method="jb")
library("quantmod")
library("fBasics")
symbols <- c("ADBE", "AMD", "MSFT", "QCOM", "CSCO")
getSymbols(symbols)
msft_returns <- monthlyReturn(MSFT$MSFT.Close)
log_msft_returns <- log(msft_returns + 1)
amd_returns <- monthlyReturn(AMD$AMD.Close)
log_amd_returns <- log(amd_returns + 1)
adbe_returns <- monthlyReturn(ADBE$ADBE.Close)
log_adbe_returns <- log(adbe_returns + 1)
qcom_returns <- monthlyReturn(QCOM$QCOM.Close)
log_qcom_returns <- log(qcom_returns + 1)
csco_returns <- monthlyReturn(CSCO$CSCO.Close)
log_csco_returns <- log(csco_returns + 1) * 100
intu_returns <- monthlyReturn(INTU$INTU.Close)
log_intu_returns <- log(intu_returns + 1) * 100
par(mfrow=c(2,3))  # Set up the plotting area to have 2 rows and 2 columns
acf(log_msft_returns, main="MSFT", lag.max=20)
acf(log_amd_returns, main="AMD ", lag.max=20)
acf(log_adbe_returns, main="ADBE", lag.max=20)
acf(log_qcom_returns, main="QCOM", lag.max=20)
acf(log_csco_returns, main="QCOM", lag.max=20)
acf(log_intu_returns, main="QCOM", lag.max=20)
par(mfrow=c(2,3))  # Set up the plotting area to have 2 rows and 2 columns
acf(log_msft_returns, main="MSFT", lag.max=20)
acf(log_amd_returns, main="AMD ", lag.max=20)
acf(log_adbe_returns, main="ADBE", lag.max=20)
acf(log_qcom_returns, main="QCOM", lag.max=20)
acf(log_csco_returns, main="CSCO", lag.max=20)
acf(log_intu_returns, main="INTU", lag.max=20)
par(mfrow=c(1,1))  # Reset the plotting area to default
acf(log_adbe_returns, main="ADBE", lag.max=20)
acf(log_qcom_returns, main="QCOM", lag.max=20)
acf(log_csco_returns, main="CSCO", lag.max=20)
acf(log_intu_returns, main="INTU", lag.max=20)
Box.test(log_qcom_returns,lag=17,type='Ljung')
Box.test(log_adbe_returns,lag=6,type='Ljung')
Box.test(log_adbe_returns,lag=12,type='Ljung')
acf(log_msft_returns, main="MSFT", lag.max=20)
acf(log_amd_returns, main="AMD ", lag.max=20)
Box.test(log_amd_returns,lag=17,type='Ljung')
Box.test(log_amd_returns,lag=18,type='Ljung')
Box.test(log_amd_returns,lag=16,type='Ljung')
Box.test(log_amd_returns,lag=17,type='Ljung')
Box.test(log_qcom_returns,lag=19,type='Ljung')
Box.test(log_qcom_returns,lag=20,type='Ljung')
Box.test(log_csco_returns,lag=20,type='Ljung')
Box.test(log_csco_returns,lag=14,type='Ljung')
Box.test(log_csco_returns,lag=9,type='Ljung')
Box.test(log_intu_returns,lag=18,type='Ljung')
pacf(log_amd_returns)
par(mfrow=c(2,3))  # Set up the plotting area to have 2 rows and 2 columns
pacf(log_msft_returns, main="MSFT", lag.max=20)
pacf(log_amd_returns, main="AMD ", lag.max=20)
pacf(log_adbe_returns, main="ADBE", lag.max=20)
pacf(log_qcom_returns, main="QCOM", lag.max=20)
pacf(log_csco_returns, main="CSCO", lag.max=20)
pacf(log_intu_returns, main="INTU", lag.max=20)
library(tidyquant)
library(timetk)
library(ggplot2)
library(dplyr)
tickers <- c("AAPL","ADBE","NVDA", "AMD", "MSFT", "QCOM", "CSCO", "INTU")
#tickers <- c("AAPL", "NVDA")
# Dowload the stock price data
multpl_stocks <- tq_get(tickers,
from = "2007-01-01",
get = "stock.prices")
multpl_stock_daily_returns <- multpl_stocks %>%
group_by(symbol) %>%                            # We are grouping the stocks by the stock symbol
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = 'daily',
col_rename = 'returns')
multpl_stock_daily_returns %>%
ggplot(aes(x = date, y = returns)) +
geom_line() +
geom_hline(yintercept = 0) +
facet_wrap(~symbol, scales = "free_y") +
scale_y_continuous(labels = scales::percent) +
labs(x = "Date", y = "Returns") +
scale_color_brewer(palette = "Set2",
name = "",
guide = FALSE) +
theme_classic()
multpl_stock_daily_returns <- multpl_stocks %>%
group_by(symbol) %>%                            # We are grouping the stocks by the stock symbol
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = 'daily',
col_rename = 'returns')
multpl_stock_daily_returns %>%
ggplot(aes(x = date, y = returns)) +
geom_line() +
geom_hline(yintercept = 0) +
facet_wrap(~symbol, scales = "free_y", nrow=2, ncol=4) +
scale_y_continuous(labels = scales::percent) +
labs(x = "Date", y = "Returns") +
scale_color_brewer(palette = "Set2",
name = "",
guide = FALSE) +
theme_classic()
library("quantmod")
library("fBasics")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
symbols <- c("ADBE", "AMD", "MSFT", "QCOM", "CSCO", "INTU", "AAPL", "NVDA")
getSymbols(symbols)
symbols <- c("ADBE", "AMD", "MSFT", "QCOM", "CSCO", "INTU", "AAPL", "NVDA")
getSymbols(symbols, to="2025-02-10")
multpl_stock_daily_returns %>%
ggplot(aes(x = returns)) +
geom_histogram(bins = 100, fill = "black", color = "black", alpha = 0.7) +
facet_wrap(~symbol, scales = "free_y", nrow = 2, ncol = 4) +
labs(x = "Returns", y = "Frequency") +
theme_classic()
multpl_stock_daily_returns %>%
ggplot(aes(x = returns)) +
geom_histogram(bins = 100, fill = "black", color = "black", alpha = 0.7) +
facet_wrap(~symbol, scales = "free_y", nrow = 2, ncol = 4) +
labs(x = "Returns", y = "Frequency") +
theme_classic()
aapl_return <- monthlyReturn(AAPL$AAPL.Close)
basicStats(aapl_return)
log_aapl_returns <- log(aapl_return + 1) *100
basicStats(log_aapl_returns)
normalTest(log_aapl_returns,method="jb")
symbols <- c("ADBE", "AMD", "MSFT", "QCOM", "CSCO", "INTU", "AAPL", "NVDA")
getSymbols(symbols, to="2025-02-10")
msft_returns <- monthlyReturn(MSFT$MSFT.Close)
basicStats(msft_returns)
log_msft_returns <- log(msft_returns + 1) *100
basicStats(log_msft_returns)
normalTest(log_msft_returns,method="jb")
amd_returns <- monthlyReturn(AMD$AMD.Close)
basicStats(amd_returns)
log_amd_returns <- log(amd_returns + 1)*100
basicStats(log_amd_returns)
normalTest(log_amd_returns,method="jb")
adbe_returns <- monthlyReturn(ADBE$ADBE.Close)
basicStats(adbe_returns)
log_adbe_returns <- log(adbe_returns + 1)*100
basicStats(log_adbe_returns)
normalTest(log_adbe_returns,method="jb")
qcom_returns <- monthlyReturn(QCOM$QCOM.Close)
basicStats(qcom_returns)
log_qcom_returns <- log(qcom_returns + 1)*100
basicStats(log_qcom_returns)
normalTest(log_qcom_returns,method="jb")
csco_returns <- monthlyReturn(CSCO$CSCO.Close)
basicStats(csco_returns)
log_csco_returns <- log(csco_returns + 1)* 100
basicStats(log_csco_returns)
normalTest(log_csco_returns,method="jb")
intu_returns <- monthlyReturn(INTU$INTU.Close)
basicStats(intu_returns)
log_intu_returns <- log(intu_returns + 1)*100
basicStats(log_intu_returns)
aapl_returns <- monthlyReturn(AAPL$AAPL.Close)
basicStats(aapl_returns)
log_aapl_returns <- log(aapl_returns + 1)*100
basicStats(log_aapl_returns)
nvda_returns <- monthlyReturn(NVDA$NVDA.Close)
basicStats(nvda_returns)
log_nvda_returns <- log(nvda_returns + 1)*100
basicStats(log_nvda_returns)
par(mfrow=c(2,4))  # Set up the plotting area to have 2 rows and 2 columns
acf(log_aapl_returns, main="AAPL", lag.max=20)
acf(log_nvda_returns, main="NVDA", lag.max=20)
acf(log_msft_returns, main="MSFT", lag.max=20)
acf(log_amd_returns, main="AMD ", lag.max=20)
acf(log_adbe_returns, main="ADBE", lag.max=20)
acf(log_qcom_returns, main="QCOM", lag.max=20)
acf(log_csco_returns, main="CSCO", lag.max=20)
acf(log_intu_returns, main="INTU", lag.max=20)
