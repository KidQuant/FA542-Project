# ============================================================================
# FA542: Time Series with Applications to Finance
# Project: Analysis of Financial Time Series (Gold Example)
# Asset: Gold
# Spot Price: GLD (ETF tracking gold)
# Futures Price: GC=F (Gold futures)
# ============================================================================
# Load Required Libraries
library(quantmod)             # Data retrieval and charting
library(forecast)             # ARIMA modeling & forecasting
library(tseries)              # Unit-root tests
library(urca)                 # Cointegration tests (Johansen)
library(vars)                 # VAR modeling
library(rugarch)              # GARCH modeling
library(PerformanceAnalytics) # Risk metrics and VaR
library(ggplot2)              # Enhanced plotting
library(zoo)                  # For na.approx()

# ============================================================================
# 1. Data Retrieval and Preparation
# ============================================================================
start_date <- as.Date("2008-01-01")  # At least 15 years of data
end_date <- Sys.Date()

# Retrieve Spot Price Data (GLD) using auto.assign=FALSE to avoid global objects
spot <- getSymbols("GLD", from = start_date, to = end_date, auto.assign = FALSE)[, "GLD.Adjusted"]
spot <- na.omit(spot)  # Remove any missing values

# Retrieve Futures Price Data (GC=F) using auto.assign=FALSE
futures <- getSymbols("GC=F", from = start_date, to = end_date, auto.assign = FALSE)[, "GC=F.Adjusted"]
# Fill missing values using linear interpolation then omit any remaining NAs
futures <- na.approx(futures)
futures <- na.omit(futures)

# ============================================================================
# 2. Basic Statistical Examination
# ============================================================================
cat("=== Descriptive Statistics for Spot Prices ===\n")
print(summary(spot))
cat("Standard Deviation (Spot):", sd(spot), "\n\n")

cat("=== Descriptive Statistics for Futures Prices ===\n")
print(summary(futures))
cat("Standard Deviation (Futures):", sd(futures), "\n\n")

# ============================================================================
# 3. Visual Behavior of the Time Series
# ============================================================================
# Plot Spot Price Time Series
chartSeries(spot, theme = chartTheme("white"), name = "Spot Price (GLD)")

# Plot Futures Price Time Series
chartSeries(futures, theme = chartTheme("white"), name = "Futures Price (GC=F)")

# ============================================================================
# 4. Returns Analysis and Relationship Over Different Time Periods
# ============================================================================
# Compute Log Returns and remove any resulting NAs
spot_returns <- na.omit(diff(log(spot)))
futures_returns <- na.omit(diff(log(futures)))

# Plot Returns Time Series
chartSeries(spot_returns, theme = chartTheme("white"), name = "Spot Returns")
chartSeries(futures_returns, theme = chartTheme("white"), name = "Futures Returns")

# Merge Returns for Comparison and ensure no NAs remain
returns_df <- merge(spot_returns, futures_returns)
returns_df <- na.omit(returns_df)
colnames(returns_df) <- c("Spot_Returns", "Futures_Returns")

# Scatter Plot of Spot vs. Futures Returns
ggplot(as.data.frame(returns_df), aes(x = Spot_Returns, y = Futures_Returns)) +
  geom_point(color = "blue", alpha = 0.5) +
  labs(title = "Scatter Plot of Spot vs. Futures Returns",
       x = "Spot Returns",
       y = "Futures Returns") +
  theme_minimal()

# Calculate Correlation Between Returns
correlation <- cor(returns_df$Spot_Returns, returns_df$Futures_Returns)
cat("Correlation between Spot and Futures Returns:", correlation, "\n\n")

# ============================================================================
# 5. Unit-Root Tests
# ============================================================================
cat("=== Augmented Dickey-Fuller (ADF) Tests ===\n")
cat("ADF Test for Spot Prices:\n")
suppressWarnings(print(adf.test(spot)))

cat("ADF Test for Futures Prices:\n")
suppressWarnings(print(adf.test(futures)))

cat("ADF Test for Spot Returns:\n")
suppressWarnings(print(adf.test(spot_returns)))

cat("ADF Test for Futures Returns:\n")
suppressWarnings(print(adf.test(futures_returns)))
cat("\n")

# ============================================================================
# 6. ARIMA Models and Forecasting
# ============================================================================
# ARIMA Modeling for Spot Prices
spot_arima <- auto.arima(spot)
cat("=== ARIMA Model for Spot Prices ===\n")
summary(spot_arima)

# Forecasting Spot Prices (Next 30 Days)
spot_forecast <- forecast(spot_arima, h = 30)
plot(spot_forecast, main = "30-Day Forecast of Spot Prices")

# ARIMA Modeling for Spot Returns
spot_ret_arima <- auto.arima(spot_returns)
cat("=== ARIMA Model for Spot Returns ===\n")
summary(spot_ret_arima)

# Forecasting Spot Returns (Next 30 Days)
spot_ret_forecast <- forecast(spot_ret_arima, h = 30)
plot(spot_ret_forecast, main = "30-Day Forecast of Spot Returns")

# ============================================================================
# 7. GARCH Modeling for Conditional Variance
# ============================================================================
# Standard GARCH(1,1) Model for Spot Returns
spec_garch <- ugarchspec(
  variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
  mean.model = list(armaOrder = c(1, 1), include.mean = TRUE),
  distribution.model = "norm"
)
garch_fit <- ugarchfit(spec = spec_garch, data = spot_returns)
cat("=== Standard GARCH(1,1) Model Fit for Spot Returns ===\n")
print(garch_fit)

# Alternative: eGARCH(1,1) Model for Spot Returns
spec_egarch <- ugarchspec(
  variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
  mean.model = list(armaOrder = c(1, 1), include.mean = TRUE),
  distribution.model = "norm"
)
egarch_fit <- ugarchfit(spec = spec_egarch, data = spot_returns)
cat("=== eGARCH(1,1) Model Fit for Spot Returns ===\n")
print(egarch_fit)

# ============================================================================
# 8. Multi-variate Time Series Analysis: VAR / VECM
# ============================================================================
# Merge Spot and Futures Prices for cointegration test
prices <- merge(spot, futures)
colnames(prices) <- c("Spot", "Futures")
prices <- na.omit(prices)

# Johansen Cointegration Test to Check for Long-Run Relationships
jotest <- ca.jo(prices, type = "trace", ecdet = "none", K = 2)
cat("=== Johansen Cointegration Test ===\n")
summary(jotest)

# For demonstration, use a VAR model on returns.
var_data <- merge(spot_returns, futures_returns)
var_data <- na.omit(var_data)
colnames(var_data) <- c("Spot_Returns", "Futures_Returns")

# Select Optimal Lag Length for VAR
lag_selection <- VARselect(var_data, lag.max = 10, type = "const")
cat("=== VAR Lag Selection ===\n")
print(lag_selection$selection)

# Fit a VAR Model (using chosen lag, e.g., 2)
var_model <- VAR(var_data, p = 2, type = "const")
cat("=== VAR Model Summary ===\n")
summary(var_model)

# ============================================================================
# 9. Value-at-Risk (VaR) Analysis
# ============================================================================
# Calculate VaR for Spot Returns at 95% Confidence Level
VaR_spot_hist <- VaR(spot_returns, p = 0.95, method = "historical")
cat("=== Historical VaR (95%) for Spot Returns ===\n")
print(VaR_spot_hist)

VaR_spot_gauss <- VaR(spot_returns, p = 0.95, method = "gaussian")
cat("=== Gaussian VaR (95%) for Spot Returns ===\n")
print(VaR_spot_gauss)

# Visualize the Distribution of Returns with VaR Thresholds
hist(spot_returns, breaks = 50, main = "Histogram of Spot Returns",
     xlab = "Log Returns", col = "skyblue", border = "white")
abline(v = as.numeric(VaR_spot_hist), col = "red", lwd = 2, lty = 2)
abline(v = as.numeric(VaR_spot_gauss), col = "darkgreen", lwd = 2, lty = 2)
legend("topright", legend = c("Historical VaR", "Gaussian VaR"),
       col = c("red", "darkgreen"), lty = 2, lwd = 2)

# ============================================================================
# 10. Conclusion and Managerial Implications

cat("\nAnalysis complete.\n")

